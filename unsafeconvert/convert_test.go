package unsafeconvert

import (
	"bytes"
	"testing"

	"assuredrelease.com/cypherlock-pe/util"
)

type TestType struct {
	A [32]byte
	B [16]byte
}

func TestReflectConvert(t *testing.T) {
	td := new(TestType)
	d := make([]byte, util.TypeSize(td))
	td2 := Convert(d, td).(*TestType)
	td3 := Convert(d, td).(*TestType)
	td2.A = [32]byte{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
		0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F}
	td3.B = [16]byte{0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F}
	if !bytes.Equal(td2.A[:], td3.A[:]) || !bytes.Equal(td2.B[:], td3.B[:]) {
		t.Error("Conversion failure")
	}
}
